The Open Web Application Security Project (OWASP) is a non-profit organization founded in 2001, with the goal of helping website owners 
and security experts protect web applications from cyber attacks. OWASP has 32,000 volunteers around the world who perform security 
assessments and research.

--------------------------------------------------------------------------------------------------------------------------------------------

OWASP TOP 10

1) Injection flaws
    ~ common in applications today - occur because user controlled input is interpreted as actual commands or parameters by the application. 
    ~ depend on what technologies are being used and how exactly the input is interpreted by these technologies. 
    ~ SQL Injection: occurs when user controlled input is passed to SQL queries. As a result, an attacker can pass in SQL queries 
    to manipulate the outcome of such queries. 
    ~ Command Injection: occurs when user input is passed to system commands. As a result, an attacker is able to execute arbitrary 
    system commands on application servers.
    ~ an attacker can access, Modify and Delete information in a database when this input is passed into database queries. 

The main defence for preventing injection attacks is ensuring that user controlled input is not interpreted as queries or commands. 
Using an allow list: when input is sent to the server, this input is compared to a list of safe input or characters. If the input is marked
as safe, then it is processed. Otherwise, it is rejected and the application throws an error.
Stripping input: If the input contains dangerous characters, these characters are removed before they are processed. Dangerous characters 
or input is classified as any input that can change how the underlying data is processed. 

Command Injection occurs when server-side code (like PHP) in a web application makes a system call on the hosting machine.  It is a web
vulnerability that allows an attacker to take advantage of that made system call to execute operating system commands on the server.  
Sometimes this won't always end in something malicious, like a whoami or just reading of files.  That isn't too bad.  But the thing about
command injection is it opens up many options for the attacker.  The worst thing they could do would be to spawn a reverse shell to become 
the user that the web server is running as.  A simple ;nc -e /bin/bash is all that's needed and they own your server; some variants of 
netcat don't support the -e option. You can use a list of these reverse shells as an alternative. 

Once the attacker has a foothold on the web server, they can start the usual enumeration of your systems and start looking for ways to pivot 
around.  Now that we know what command injection is, we'll start going into the different types and how to test for them.
