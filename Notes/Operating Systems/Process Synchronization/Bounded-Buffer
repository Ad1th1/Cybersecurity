
  
-> Classical synchronization problem
-> Bounded buffer / Producer-consumer problem
-> buffer on n slots and each slot is capable if storing one unit of data
-> 2 processes = producer and consumer, operating on the buffer
-> producer tries to insert data into an empty slot in the buffer
-> consumer tries to remove data from a filled slot in the buffer
-> producer must not insert data when buffer is full
-> consumer must not remove data when buffer is empty
-> producer and consumer must not insert and remove data simultaneously

-> 3 semaphores
-> m(mutex) = a binary semaphore used to acquire and release locks
-> empty, counting semaphore whose initial value is the number of slots in the buffer, since all slots are initially empty
-> full,  counting semaphore whose initial value is 0

Producer:
do{
wait(empty); //wait until empty > 0 and then decrement empty
wait(mutex); //acquire lock
/* add data to buffer */
signal(mutex);
signal(full); //increment full because we filled one slot

}while(TRUE)

Consumer:
do{
wait(full); //wait until full > 0 and then decrement full
wait(mutex); //acquire lock
/* remove data from buffer */
signal(mutex);
signal(empty); //increment full because we filled one slot

}while(TRUE)
